//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Settings/Input/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""Player_1"",
            ""id"": ""62fd8281-64c0-44c1-8298-c4fcd3225b38"",
            ""actions"": [
                {
                    ""name"": ""XMove"",
                    ""type"": ""Button"",
                    ""id"": ""74a78806-7efe-4c66-a89f-ad8359603721"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""YMove"",
                    ""type"": ""Button"",
                    ""id"": ""8013428e-93d4-45f3-ae6c-b087d049d9e7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Strike"",
                    ""type"": ""Button"",
                    ""id"": ""8d1460f4-47e0-449c-9262-d83751655c54"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Miss"",
                    ""type"": ""Button"",
                    ""id"": ""3dcd9a89-452a-4ffc-8107-4868e761b720"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""A D"",
                    ""id"": ""5ac301fe-57b2-42b8-8c7a-f8e8e4b6cf58"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""XMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""aa31c7ad-0209-4285-8ee4-4e05e1cac6fa"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""XMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0cf1d804-4451-475c-bba7-70fe47d94f0d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""XMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""W S"",
                    ""id"": ""2bba2e69-7fed-45e8-909e-cf9d785ee97d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""YMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b9461380-fce7-4a84-a9c7-7a0a18518b17"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""YMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a1b6564c-c102-4da3-9ecf-f1fdf1133a85"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""YMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""58ff1fdd-6c5c-45ac-8123-f3ef8520301c"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Strike"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""80b6e225-55f4-492d-9a51-89fb8faee55e"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Miss"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player_2"",
            ""id"": ""dd3beac3-d6e9-46b3-832b-fdb680aaaac5"",
            ""actions"": [
                {
                    ""name"": ""XMove"",
                    ""type"": ""Button"",
                    ""id"": ""42db2f5c-43fe-4cc3-b44b-7e7ef5f2da47"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""YMove"",
                    ""type"": ""Button"",
                    ""id"": ""0dff3f41-1067-48a6-b687-d31b07ff120a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Strike"",
                    ""type"": ""Button"",
                    ""id"": ""3042480a-48e1-4d90-832b-dd13af9a4407"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Miss"",
                    ""type"": ""Button"",
                    ""id"": ""9934e823-ef3d-41c3-96cb-37fb08272e46"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f9d262ee-0f46-438e-bef2-09731bcd6af1"",
                    ""path"": ""<Keyboard>/comma"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Strike"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55079dc5-8bd1-4ef3-a02f-dc680fb58be6"",
                    ""path"": ""<Keyboard>/period"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Miss"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Left Right"",
                    ""id"": ""feb33948-81ff-4d1d-97ca-75bdeaa301b5"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""XMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""367674f4-7307-441c-9478-1dae5b21e8d7"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""XMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b797e88d-e5d5-4b4f-a685-65d09cf38f86"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""XMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Up Down"",
                    ""id"": ""f4baeb1e-4200-4ffe-8355-34d1a12f6b49"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""YMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""68909813-920e-453e-aa3b-a8b9eda7762d"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""YMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""2a283a6e-df99-4044-a90f-50c2bedeac6c"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""YMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyBoard"",
            ""bindingGroup"": ""KeyBoard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player_1
        m_Player_1 = asset.FindActionMap("Player_1", throwIfNotFound: true);
        m_Player_1_XMove = m_Player_1.FindAction("XMove", throwIfNotFound: true);
        m_Player_1_YMove = m_Player_1.FindAction("YMove", throwIfNotFound: true);
        m_Player_1_Strike = m_Player_1.FindAction("Strike", throwIfNotFound: true);
        m_Player_1_Miss = m_Player_1.FindAction("Miss", throwIfNotFound: true);
        // Player_2
        m_Player_2 = asset.FindActionMap("Player_2", throwIfNotFound: true);
        m_Player_2_XMove = m_Player_2.FindAction("XMove", throwIfNotFound: true);
        m_Player_2_YMove = m_Player_2.FindAction("YMove", throwIfNotFound: true);
        m_Player_2_Strike = m_Player_2.FindAction("Strike", throwIfNotFound: true);
        m_Player_2_Miss = m_Player_2.FindAction("Miss", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player_1
    private readonly InputActionMap m_Player_1;
    private IPlayer_1Actions m_Player_1ActionsCallbackInterface;
    private readonly InputAction m_Player_1_XMove;
    private readonly InputAction m_Player_1_YMove;
    private readonly InputAction m_Player_1_Strike;
    private readonly InputAction m_Player_1_Miss;
    public struct Player_1Actions
    {
        private @GameInput m_Wrapper;
        public Player_1Actions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @XMove => m_Wrapper.m_Player_1_XMove;
        public InputAction @YMove => m_Wrapper.m_Player_1_YMove;
        public InputAction @Strike => m_Wrapper.m_Player_1_Strike;
        public InputAction @Miss => m_Wrapper.m_Player_1_Miss;
        public InputActionMap Get() { return m_Wrapper.m_Player_1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_1Actions set) { return set.Get(); }
        public void SetCallbacks(IPlayer_1Actions instance)
        {
            if (m_Wrapper.m_Player_1ActionsCallbackInterface != null)
            {
                @XMove.started -= m_Wrapper.m_Player_1ActionsCallbackInterface.OnXMove;
                @XMove.performed -= m_Wrapper.m_Player_1ActionsCallbackInterface.OnXMove;
                @XMove.canceled -= m_Wrapper.m_Player_1ActionsCallbackInterface.OnXMove;
                @YMove.started -= m_Wrapper.m_Player_1ActionsCallbackInterface.OnYMove;
                @YMove.performed -= m_Wrapper.m_Player_1ActionsCallbackInterface.OnYMove;
                @YMove.canceled -= m_Wrapper.m_Player_1ActionsCallbackInterface.OnYMove;
                @Strike.started -= m_Wrapper.m_Player_1ActionsCallbackInterface.OnStrike;
                @Strike.performed -= m_Wrapper.m_Player_1ActionsCallbackInterface.OnStrike;
                @Strike.canceled -= m_Wrapper.m_Player_1ActionsCallbackInterface.OnStrike;
                @Miss.started -= m_Wrapper.m_Player_1ActionsCallbackInterface.OnMiss;
                @Miss.performed -= m_Wrapper.m_Player_1ActionsCallbackInterface.OnMiss;
                @Miss.canceled -= m_Wrapper.m_Player_1ActionsCallbackInterface.OnMiss;
            }
            m_Wrapper.m_Player_1ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @XMove.started += instance.OnXMove;
                @XMove.performed += instance.OnXMove;
                @XMove.canceled += instance.OnXMove;
                @YMove.started += instance.OnYMove;
                @YMove.performed += instance.OnYMove;
                @YMove.canceled += instance.OnYMove;
                @Strike.started += instance.OnStrike;
                @Strike.performed += instance.OnStrike;
                @Strike.canceled += instance.OnStrike;
                @Miss.started += instance.OnMiss;
                @Miss.performed += instance.OnMiss;
                @Miss.canceled += instance.OnMiss;
            }
        }
    }
    public Player_1Actions @Player_1 => new Player_1Actions(this);

    // Player_2
    private readonly InputActionMap m_Player_2;
    private IPlayer_2Actions m_Player_2ActionsCallbackInterface;
    private readonly InputAction m_Player_2_XMove;
    private readonly InputAction m_Player_2_YMove;
    private readonly InputAction m_Player_2_Strike;
    private readonly InputAction m_Player_2_Miss;
    public struct Player_2Actions
    {
        private @GameInput m_Wrapper;
        public Player_2Actions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @XMove => m_Wrapper.m_Player_2_XMove;
        public InputAction @YMove => m_Wrapper.m_Player_2_YMove;
        public InputAction @Strike => m_Wrapper.m_Player_2_Strike;
        public InputAction @Miss => m_Wrapper.m_Player_2_Miss;
        public InputActionMap Get() { return m_Wrapper.m_Player_2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_2Actions set) { return set.Get(); }
        public void SetCallbacks(IPlayer_2Actions instance)
        {
            if (m_Wrapper.m_Player_2ActionsCallbackInterface != null)
            {
                @XMove.started -= m_Wrapper.m_Player_2ActionsCallbackInterface.OnXMove;
                @XMove.performed -= m_Wrapper.m_Player_2ActionsCallbackInterface.OnXMove;
                @XMove.canceled -= m_Wrapper.m_Player_2ActionsCallbackInterface.OnXMove;
                @YMove.started -= m_Wrapper.m_Player_2ActionsCallbackInterface.OnYMove;
                @YMove.performed -= m_Wrapper.m_Player_2ActionsCallbackInterface.OnYMove;
                @YMove.canceled -= m_Wrapper.m_Player_2ActionsCallbackInterface.OnYMove;
                @Strike.started -= m_Wrapper.m_Player_2ActionsCallbackInterface.OnStrike;
                @Strike.performed -= m_Wrapper.m_Player_2ActionsCallbackInterface.OnStrike;
                @Strike.canceled -= m_Wrapper.m_Player_2ActionsCallbackInterface.OnStrike;
                @Miss.started -= m_Wrapper.m_Player_2ActionsCallbackInterface.OnMiss;
                @Miss.performed -= m_Wrapper.m_Player_2ActionsCallbackInterface.OnMiss;
                @Miss.canceled -= m_Wrapper.m_Player_2ActionsCallbackInterface.OnMiss;
            }
            m_Wrapper.m_Player_2ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @XMove.started += instance.OnXMove;
                @XMove.performed += instance.OnXMove;
                @XMove.canceled += instance.OnXMove;
                @YMove.started += instance.OnYMove;
                @YMove.performed += instance.OnYMove;
                @YMove.canceled += instance.OnYMove;
                @Strike.started += instance.OnStrike;
                @Strike.performed += instance.OnStrike;
                @Strike.canceled += instance.OnStrike;
                @Miss.started += instance.OnMiss;
                @Miss.performed += instance.OnMiss;
                @Miss.canceled += instance.OnMiss;
            }
        }
    }
    public Player_2Actions @Player_2 => new Player_2Actions(this);
    private int m_KeyBoardSchemeIndex = -1;
    public InputControlScheme KeyBoardScheme
    {
        get
        {
            if (m_KeyBoardSchemeIndex == -1) m_KeyBoardSchemeIndex = asset.FindControlSchemeIndex("KeyBoard");
            return asset.controlSchemes[m_KeyBoardSchemeIndex];
        }
    }
    public interface IPlayer_1Actions
    {
        void OnXMove(InputAction.CallbackContext context);
        void OnYMove(InputAction.CallbackContext context);
        void OnStrike(InputAction.CallbackContext context);
        void OnMiss(InputAction.CallbackContext context);
    }
    public interface IPlayer_2Actions
    {
        void OnXMove(InputAction.CallbackContext context);
        void OnYMove(InputAction.CallbackContext context);
        void OnStrike(InputAction.CallbackContext context);
        void OnMiss(InputAction.CallbackContext context);
    }
}
